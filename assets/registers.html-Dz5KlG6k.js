import{_ as a,c as r,b as t,f as e,d as n,e as l,g as d,r as o,o as h}from"./app-CVkNJmK6.js";const c={};function p(g,s){const i=o("RouteLink");return h(),r("div",null,[s[2]||(s[2]=t("h1",{id:"unix-system-call-numbers",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#unix-system-call-numbers"},[t("span",null,"UNIX System Call Numbers")])],-1)),t("p",null,[s[1]||(s[1]=e("For AArch64/ARM64 Assembly tutorials see ")),n(i,{to:"/CS/asm/"},{default:l(()=>s[0]||(s[0]=[e("here")])),_:1})]),s[3]||(s[3]=d(`<h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h2><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.global _start</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.align </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">_start:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     your_code_here</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">            mov</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> X16, syscall_number     </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; Load syscall number</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            svc #</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x80</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                   ; Example svc on macOS</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            ...                         </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; Other ops</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">            mov</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> X16, </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                  ; Exit</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            svc #</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x80</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                   ; Call kernel</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">syscall_number:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> .quad your_call_num_here</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th><strong>Register</strong></th><th><strong>Explanation</strong></th></tr></thead><tbody><tr><td><strong><code>X0</code></strong></td><td>First argument register and also used for the return value of a function. When calling a function, the first parameter is passed in <code>X0</code>.</td></tr><tr><td><strong><code>X1</code></strong></td><td>Second argument register. Used to pass the second parameter to a function.</td></tr><tr><td><strong><code>X2</code></strong></td><td>Third argument register. Used to pass the third parameter to a function.</td></tr><tr><td><strong><code>X3</code></strong></td><td>Fourth argument register. Used to pass the fourth parameter to a function.</td></tr><tr><td><strong><code>X4</code></strong></td><td>Fifth argument register. Used to pass the fifth parameter to a function.</td></tr><tr><td><strong><code>X5</code></strong></td><td>Sixth argument register. Used to pass the sixth parameter to a function.</td></tr><tr><td><strong><code>X6</code></strong></td><td>Seventh argument register. Used to pass the seventh parameter to a function.</td></tr><tr><td><strong><code>X7</code></strong></td><td>Eighth argument register. Used to pass the eighth parameter to a function.</td></tr><tr><td><strong><code>X8</code></strong></td><td>Often used as a special-purpose register for system calls. In many ABIs, it holds the system call number when making a syscall.</td></tr><tr><td><strong><code>X9</code></strong></td><td>Temporary register. Caller-saved, so its value is not preserved across function calls. Used for intermediate calculations or temporary storage.</td></tr><tr><td><strong><code>X10</code></strong></td><td>Temporary register. Similar to <code>X9</code>, it is used for temporary values and is caller-saved.</td></tr><tr><td><strong><code>X11</code></strong></td><td>Temporary register. Another general-purpose register for temporary data or calculations.</td></tr><tr><td><strong><code>X12</code></strong></td><td>Temporary register. Caller-saved and used for intermediate calculations.</td></tr><tr><td><strong><code>X13</code></strong></td><td>Temporary register. Caller-saved and used for temporary or intermediate data.</td></tr><tr><td><strong><code>X14</code></strong></td><td>Temporary register. Another caller-saved register for general-purpose use.</td></tr><tr><td><strong><code>X15</code></strong></td><td>Temporary register. Caller-saved, and typically used for temporary calculations or data storage.</td></tr><tr><td><strong><code>X16</code></strong></td><td>Often reserved as an intra-procedure call (IPC) scratch register. It can also be used for special purposes like veneers or branching by the linker.</td></tr><tr><td><strong><code>X17</code></strong></td><td>Another IPC scratch register. Like <code>X16</code>, it is used for linker-related tasks or branch-to-register operations.</td></tr><tr><td><strong><code>X18</code></strong></td><td>Platform register. Its usage depends on the operating system. On macOS, it may be reserved for system purposes and should not be modified directly.</td></tr><tr><td><strong><code>X19</code></strong></td><td>Callee-saved register. Preserved across function calls, making it suitable for storing variables that must survive after calling other functions.</td></tr><tr><td><strong><code>X20</code></strong></td><td>Callee-saved register. Used for local variables or data that must be preserved across function calls.</td></tr><tr><td><strong><code>X21</code></strong></td><td>Callee-saved register. Preserved across function calls, often used for storing persistent values.</td></tr><tr><td><strong><code>X22</code></strong></td><td>Callee-saved register. Used for local or long-lived variables within a function.</td></tr><tr><td><strong><code>X23</code></strong></td><td>Callee-saved register. Preserved across function calls and used for persistent data.</td></tr><tr><td><strong><code>X24</code></strong></td><td>Callee-saved register. Used for storing variables that should not be overwritten during function calls.</td></tr><tr><td><strong><code>X25</code></strong></td><td>Callee-saved register. Typically used for storing persistent data within a function.</td></tr><tr><td><strong><code>X26</code></strong></td><td>Callee-saved register. Used for long-term data storage within a function, preserved across calls.</td></tr><tr><td><strong><code>X27</code></strong></td><td>Callee-saved register. Similar to other callee-saved registers, used for persistent or local variables.</td></tr><tr><td><strong><code>X28</code></strong></td><td>Callee-saved register. Another general-purpose register that retains its value across function calls.</td></tr><tr><td><strong><code>X29</code></strong></td><td>Frame Pointer (FP). Points to the current stack frame, helping with stack navigation and function call debugging.</td></tr><tr><td><strong><code>X30</code></strong></td><td>Link Register (LR). Stores the return address after a <code>bl</code> (branch with link) instruction. It tells the CPU where to return after a subroutine is complete.</td></tr></tbody></table>`,3))])}const m=a(c,[["render",p],["__file","registers.html.vue"]]),u=JSON.parse('{"path":"/CS/ARM/registers.html","title":"UNIX System Call Numbers","lang":"zh-CN","frontmatter":{"description":"UNIX System Call Numbers For AArch64/ARM64 Assembly tutorials see Usage","head":[["meta",{"property":"og:url","content":"https://makabaka1880.xyz/CS/ARM/registers.html"}],["meta",{"property":"og:site_name","content":"Makabaka1880的博客"}],["meta",{"property":"og:title","content":"UNIX System Call Numbers"}],["meta",{"property":"og:description","content":"UNIX System Call Numbers For AArch64/ARM64 Assembly tutorials see Usage"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-22T03:53:16.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-22T03:53:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"UNIX System Call Numbers\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-22T03:53:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Makabaka1880\\",\\"url\\":\\"https://makabaka1880.xyz\\"}]}"]]},"headers":[{"level":2,"title":"Usage","slug":"usage","link":"#usage","children":[]}],"git":{"createdTime":1736864419000,"updatedTime":1742615596000,"contributors":[{"name":"makabaka1880","username":"makabaka1880","email":"makabaka1880@outlook.com","commits":2,"url":"https://github.com/makabaka1880"}]},"readingTime":{"minutes":1.86,"words":557},"filePathRelative":"CS/ARM/registers.md","localizedDate":"2025年1月14日","excerpt":"\\n<p>For AArch64/ARM64 Assembly tutorials see <a href=\\"/CS/asm/\\" target=\\"_blank\\">here</a></p>\\n<h2>Usage</h2>\\n<div class=\\"language-asm line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"asm\\" data-title=\\"asm\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.global _start</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.align </span><span style=\\"--shiki-light:#986801;--shiki-dark:#C678DD\\">4</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">_start:</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">     your_code_here</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">            ...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#C678DD\\">            mov</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> X16, syscall_number     </span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">; Load syscall number</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">            svc #</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">0x80</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">                   ; Example svc on macOS</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">            ...                         </span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">; Other ops</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#C678DD\\">            mov</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> X16, </span><span style=\\"--shiki-light:#986801;--shiki-dark:#C678DD\\">0</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">                  ; Exit</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">            svc #</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">0x80</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">                   ; Call kernel</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">syscall_number:</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> .quad your_call_num_here</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{m as comp,u as data};
