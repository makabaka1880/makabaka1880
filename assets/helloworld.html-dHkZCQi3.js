import{_ as k,c,g as n,d as r,e as a,b as i,r as h,o as g,f as e}from"./app-CVkNJmK6.js";const m="/assets/CS/asm/aligned-memaddr.webp",u={},A={class:"hint-container important"};function b(v,s){const d=h("Tabs"),o=h("CodeTabs"),p=h("Mermaid");return g(),c("div",null,[s[12]||(s[12]=n(`<h1 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world"><span>Hello World!</span></a></h1><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>These tutorials are only for AArch64 mach-o systems, thus Apple Silicon macs. It is recommended that readers have a basic understanding of C or C++, since I will use a lot of C syntax to explain</p></div><p>Everything starts with a hello world.</p><h2 id="_0-source-code-overview" tabindex="-1"><a class="header-anchor" href="#_0-source-code-overview"><span>0. Source Code Overview</span></a></h2><p>First of all, here&#39;s the source code:</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.global _start</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.align </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">4</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">_start:</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> mov</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> X0, #</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        adr X1, helloworld</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        mov</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> X2, hellolen</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        mov</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> X16, #</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">4</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        svc #</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x80</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        mov</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> X0, #</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        mov</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> X16, #</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        svc #</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x80</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">helloworld:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> .ascii &quot;Hello World!\\n&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">hellolen = . - helloworld</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Assembly language directly interacts with the hardware, which eliminates the possibility of using high-level methods such as <code>print</code> in Python or <code>std::cout</code> in C++. This means we need to directly communicate with the kernel and direct the string from creation to stdout.</p><h2 id="_1-walkthrough" tabindex="-1"><a class="header-anchor" href="#_1-walkthrough"><span>1. Walkthrough</span></a></h2><h3 id="_1x00-overall-structure" tabindex="-1"><a class="header-anchor" href="#_1x00-overall-structure"><span>1x00 Overall Structure</span></a></h3><p>The program is divided into three sections:</p>`,10)),r(d,{id:"30",data:[{id:"Initialization"},{id:"Main Program"},{id:"Data Section"}]},{title0:a(({value:t,isActive:l})=>s[0]||(s[0]=[e("Initialization")])),title1:a(({value:t,isActive:l})=>s[1]||(s[1]=[e("Main Program")])),title2:a(({value:t,isActive:l})=>s[2]||(s[2]=[e("Data Section")])),tab0:a(({value:t,isActive:l})=>s[3]||(s[3]=[i("p",null,[e("This section defines the global entry point ("),i("code",null,"_start"),e(") and ensures proper alignment for the code.")],-1),i("div",{class:"language-asm line-numbers-mode","data-highlighter":"shiki","data-ext":"asm","data-title":"asm",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},".global _start")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},".align "),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#C678DD"}},"4")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])),tab1:a(({value:t,isActive:l})=>s[4]||(s[4]=[i("p",null,"This is the main execution logic. It outputs “Hello World!” to the screen and then exits the program.",-1),i("div",{class:"language-asm line-numbers-mode","data-highlighter":"shiki","data-ext":"asm","data-title":"asm",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"_start:"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#C678DD"}}," mov"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," X0, #"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#C678DD"}},"1"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"          ; File descriptor 1 (stdout)")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    adr X1, helloworld      "),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"; Load address of the string into X1")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#C678DD"}},"    mov"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," X2, hellolen        "),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"; Length of the string")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#C678DD"}},"    mov"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," X16, #"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#C678DD"}},"4"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"             ; System call number for write")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    svc #"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"0x80"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"               ; Make the system call")]),e(`
`),i("span",{class:"line"}),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#C678DD"}},"    mov"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," X0, #"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#C678DD"}},"0"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"              ; Exit code 0")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#C678DD"}},"    mov"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," X16, #"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#C678DD"}},"1"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"             ; System call number for exit")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    svc #"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"0x80"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"               ; Make the system call")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])),tab2:a(({value:t,isActive:l})=>s[5]||(s[5]=[i("p",null,[e("This section defines the "),i("code",null,"helloworld"),e(" label, which stores the “Hello World!” string.")],-1),i("div",{class:"language-asm line-numbers-mode","data-highlighter":"shiki","data-ext":"asm","data-title":"asm",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"helloworld:"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},' .ascii "Hello World!\\n"')]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"hellolen = . - helloworld")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])),_:1}),s[13]||(s[13]=n(`<h3 id="_1x01-initialization" tabindex="-1"><a class="header-anchor" href="#_1x01-initialization"><span>1x01 Initialization</span></a></h3><p>Let&#39;s look at the first lines:</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.global _start</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.align </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>The first line declares the <code>_start</code> label as global. This is not the same as <a href="/CS/cpp/variables">variable scopes</a>, as it ensures that the assembler and linker can access the label.</p><div class="hint-container tip"><p class="hint-container-title">Labels</p><p>Labels in assembly are <strong>identifiers</strong> that mark specific locations in your code. They represent memory addresses and can be referenced to jump or point to instructions or data. Labels can imply:</p><ul><li><strong>Definition</strong>: A label is written as <code>name:</code> (e.g., <code>_start:</code>).</li><li><strong>Reference</strong>: Instructions like <code>b</code> (branch) or <code>adr</code> (address register) can use labels to point to these locations.</li><li><strong>Scope</strong>: Labels can be local (within one file) or global (accessible across files, marked with <code>.global</code>).</li></ul><p>Common usage includes:</p><ol><li><strong>Entry Point</strong>: <code>_start:</code> is a label used as the program entry point.</li><li><strong>Data Reference</strong>: Labels like <code>helloworld:</code> point to memory locations where data (e.g., strings) are stored.</li><li><strong>Control Flow</strong>: Labels can be targets for branching (e.g., loops or conditionals).</li></ol></div><p>Here, <code>_start</code> is declared as the entry point of the program, similar to <code>int main()</code> in C++ or <code>if __name__ == &quot;__main__&quot;</code> in Python.</p><p>The <code>.align 4</code> ensures that the following label or data is aligned to a <strong>4-byte boundary</strong>. In assembly, alignment means arranging data in memory at addresses that are multiples of a specified power of 2 (in this case, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>2</mn></msup><mo>=</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">2^2 = 4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span></span></span></span>).</p><figure><img src="`+m+'" alt="Aligned vs Unaligned Memory" tabindex="0" loading="lazy"><figcaption>Aligned vs Unaligned Memory</figcaption></figure><p>Aligned addresses make random accesses easier, as they just require an index multiplication <code>addr = index * 4</code> (<code>.align 4</code>) or <code>addr = index * 8</code> (<code>.align 8</code>).</p><p>For unaligned memory, when accessing unaligned memory, the CPU may require multiple memory fetches and additional processing to retrieve the correct data. The CPU may need to fetch data from two memory locations and combine the results (depending on the memory width).</p><p>For example, accessing a 4-byte integer starting at <code>0x03</code> might require reading part of the data from <code>0x00</code>–<code>0x03</code> and part from <code>0x04</code>–<code>0x07</code>.</p><h3 id="_1x02-main-program" tabindex="-1"><a class="header-anchor" href="#_1x02-main-program"><span>1x02 Main Program</span></a></h3><p>The <code>_start</code> block could be broken down into two sections: the first section printing the string and the second one in charge of cleanup.</p><p>Let&#39;s start with the printing part, and go through it line by line.</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">_start:</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> mov</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> X0, #</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Here, <code>_start</code> is defined. <code>_start</code> does not need to be explicitly called, as it is the entry point of the program. This is similar to defining <code>int main()</code> in C++.</p>',16)),i("div",A,[s[10]||(s[10]=i("p",{class:"hint-container-title"},"Stylization Choices",-1)),s[11]||(s[11]=i("p",null,"There are actually more differences between AArch64 and x86_64 assembly than just syntax, registers, and calls. In AArch64, label definitions are often put on the same line as the first instruction, whereas in x86_64, they are put on a new line.",-1)),r(o,{id:"137",data:[{id:"AArch64"},{id:"x86_64"}],"tab-id":"asm"},{title0:a(({value:t,isActive:l})=>s[6]||(s[6]=[e("AArch64")])),title1:a(({value:t,isActive:l})=>s[7]||(s[7]=[e("x86_64")])),tab0:a(({value:t,isActive:l})=>s[8]||(s[8]=[i("div",{class:"language-asm line-numbers-mode","data-highlighter":"shiki","data-ext":"asm","data-title":"asm",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"_start:"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#C678DD"}}," mov"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," X0, #"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#C678DD"}},"1")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"        adr X1, helloworld")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"        ...")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])),tab1:a(({value:t,isActive:l})=>s[9]||(s[9]=[i("div",{class:"language-asm line-numbers-mode","data-highlighter":"shiki","data-ext":"asm","data-title":"asm",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"_start:")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#C678DD"}},"    mov"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," X0, #"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#C678DD"}},"1")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    adr X1, helloworld")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    ...")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])),_:1})]),s[14]||(s[14]=n(`<p>The <code>mov</code> instruction copies the value of one register into another. Here&#39;s two examples:</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">_start:</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> mov</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> X9, #</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">53</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     ; Stores the value 53 into register X9</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        mov</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> X9, #</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x32</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   ; Overrides X9 to value 50</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        mov</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> X10, X9     </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; Copies the value of X9 into X10</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),r(p,{id:"mermaid-150",code:"eJxLL0osyFAIceFSAILikuj44pLEohKF5MScnNSUWLBoZl5mSYRltKmxwqO2SQoRlhDR3NKSxJJUoLhBhbERigxYvaFBdIQlRNjQACKeWpFZEl1clqxgUGEBFILaqKCrawe1AsyEmYsQNzQAs0HauQBvVDQY"}),s[15]||(s[15]=n(`<p>The register <code>X0</code> is the first argument. This register will be used by the <code>svc</code> instruction as the first argument to a system call. In this specific case, <code>X0</code> represents the <strong>file descriptor</strong> for the write system call.</p><p>File descriptors are standard numerical values representing input/output streams:</p><table><thead><tr><th>Value</th><th>Descriptor</th></tr></thead><tbody><tr><td>0</td><td><code>STDIN</code> Standard Input</td></tr><tr><td>1</td><td><code>STDOUT</code> Standard Output</td></tr><tr><td>2</td><td><code>STDERR</code> Standard Error</td></tr><tr><td>≥3</td><td>Other pipes and files</td></tr></tbody></table><blockquote><p>Therefore, <code>mov X0, #1</code> meant storing the value 1 into the register <code>X0</code>, thus using STDOUT for whatever i/o the operation is going to do next.</p></blockquote><div class="hint-container tip"><p class="hint-container-title">Registors</p><p>Here are some other registers in the Unix system. A cheatsheat can be found <a href="/CS/asm/registers">here</a></p><ol><li><strong>Caller-Saved Registers (<code>X0-X15</code>):</strong> These are used for passing arguments and temporary data. The caller must save their values if needed after the function call.</li><li><strong>Callee-Saved Registers (<code>X19-X28</code>):</strong> These are preserved across function calls, meaning the called function must save and restore them if it modifies their values.</li><li><strong>Special Purpose (<code>X16</code>, <code>X17</code>, <code>X29</code>, <code>X30</code>):</strong> Reserved for specific tasks like branching, stack management, and function returns.</li></ol></div><p>Then here&#39;s the second line</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">adr X1, helloworld</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The <code>adr</code> instruction stores helloworld&#39;s address. This is because the cpu isn&#39;t capable of storing the whole string. Passing address is quite common, such as <code>scanf(&quot;%s&quot;, &amp;num)</code> in C. Actually, when using stdin, it&#39;s almost the same.</p><p>X1 is the second parameter for a function call, which, here is data to be outputed into the STDOUT stream.</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> X2, hellolen</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>X2 here stores the length of the data to be printed. <code>hellolen</code> is a var that contained the length of <code>helloworld</code>.</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> X16, #</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The <code>X16</code> register is for system calls. After setting this and sending a <a href="#supervisor-call">supervisor call</a>, the kernel reads it and decides what to do. Other system call numbers see <a href="/CS/asm/syscalls">this chart</a>. Here, we&#39;ll be sending a write operation, thus 4.</p><div id="supervisor-call"></div><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">svc #</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x80</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The <code>svc</code> instruction sends a <strong>supervisor call</strong>.</p><div class="hint-container tip"><p class="hint-container-title">Supervisor Calls</p><p>The svc instruction sends a <strong>supervisor call</strong>, which causes the processor to switch from user mode (or another less-privileged mode) to supervisor mode (or another more-privileged mode). This allows the operating system to perform privileged operations on behalf of the user program. An exception is raised, and the CPU transfers control to an exception handler in the operating system.<br> The specific action taken by the kernel depends on the value stored in a register (usually X16) and potentially other arguments passed in general-purpose registers. The system call #0x80 is normally used in <strong>mach-o</strong> systems for normal supervisor calls.</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">_start:</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> mov</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> #</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, op_number   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; Set up op type</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ...                 </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; Sets up input params and calls other blocks</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        svc #</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x80</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">           ; Supervisor call</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Here, the first section of the program is done, thus printing the string with the following parameters:</p><ul><li><strong>X0 = 1</strong> Writes to STDOUT</li><li><strong>X1 = &amp;helloworld</strong> Output what is on the address of <code>helloworld</code></li><li><strong>X2 = hellolen</strong> Output <code>hellolen</code> bytes starting from <code>&amp;helloworld</code>.</li></ul><p>The printing is done, but valid return status should be given. Therefore</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> X0, #</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Was called, which set the first argument to 0. Here, the first argument will be used later as an <strong>exit code</strong>.</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> X16, #</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Told the kernel that the system operation should be exit, and therefore <code>X0</code> should be intepreted as the exit code.</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">svc #</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x80</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Called a SVC, which gracefully ended the program.</p><div class="language-zsh line-numbers-mode" data-highlighter="shiki" data-ext="zsh" data-title="zsh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">as</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> helloworld.s</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> helloworld.o</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     # Assemble the code</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ld</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> helloworld</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> helloworld.o</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -lSystem</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -syslibroot</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> \`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">xcrun</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -sdk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> macosx </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">--show-sdk-path</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> -e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> _start</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -arch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> arm64</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # Link the source code</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>If you see any permission issues whilst running, execute</p><div class="language-zsh line-numbers-mode" data-highlighter="shiki" data-ext="zsh" data-title="zsh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">chmod</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> +x</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> helloworld</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now, run the program.</p><div class="language-zsh line-numbers-mode" data-highlighter="shiki" data-ext="zsh" data-title="zsh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./helloworld.exec</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Hello</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> World!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Congrats on your first Hello to the AArch64 Mach-O ASM World!</p>`,32))])}const F=k(u,[["render",b],["__file","helloworld.html.vue"]]),f=JSON.parse('{"path":"/CS/ARM/helloworld.html","title":"Hello World!","lang":"zh-CN","frontmatter":{"description":"Hello World! Warning These tutorials are only for AArch64 mach-o systems, thus Apple Silicon macs. It is recommended that readers have a basic understanding of C or C++, since I...","head":[["meta",{"property":"og:url","content":"https://makabaka1880.xyz/CS/ARM/helloworld.html"}],["meta",{"property":"og:site_name","content":"Makabaka1880的博客"}],["meta",{"property":"og:title","content":"Hello World!"}],["meta",{"property":"og:description","content":"Hello World! Warning These tutorials are only for AArch64 mach-o systems, thus Apple Silicon macs. It is recommended that readers have a basic understanding of C or C++, since I..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://makabaka1880.xyz/assets/CS/asm/aligned-memaddr.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-22T03:53:16.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-22T03:53:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Hello World!\\",\\"image\\":[\\"https://makabaka1880.xyz/assets/CS/asm/aligned-memaddr.webp\\"],\\"dateModified\\":\\"2025-03-22T03:53:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Makabaka1880\\",\\"url\\":\\"https://makabaka1880.xyz\\"}]}"]]},"headers":[{"level":2,"title":"0. Source Code Overview","slug":"_0-source-code-overview","link":"#_0-source-code-overview","children":[]},{"level":2,"title":"1. Walkthrough","slug":"_1-walkthrough","link":"#_1-walkthrough","children":[{"level":3,"title":"1x00 Overall Structure","slug":"_1x00-overall-structure","link":"#_1x00-overall-structure","children":[]},{"level":3,"title":"1x01 Initialization","slug":"_1x01-initialization","link":"#_1x01-initialization","children":[]},{"level":3,"title":"1x02 Main Program","slug":"_1x02-main-program","link":"#_1x02-main-program","children":[]}]}],"git":{"createdTime":1736777548000,"updatedTime":1742615596000,"contributors":[{"name":"makabaka1880","username":"makabaka1880","email":"makabaka1880@outlook.com","commits":3,"url":"https://github.com/makabaka1880"}]},"readingTime":{"minutes":4.91,"words":1474},"filePathRelative":"CS/ARM/helloworld.md","localizedDate":"2025年1月13日","excerpt":"\\n<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">Warning</p>\\n<p>These tutorials are only for AArch64 mach-o systems, thus Apple Silicon macs. It is recommended that readers have a basic understanding of C or C++, since I will use a lot of C syntax to explain</p>\\n</div>\\n<p>Everything starts with a hello world.</p>","autoDesc":true}');export{F as comp,f as data};
