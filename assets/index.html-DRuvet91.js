import{_ as e,c as s,g as n,d as o,o as i,r as p}from"./app-CVkNJmK6.js";const r={};function l(m,t){const a=p("NextPage");return i(),s("div",null,[t[0]||(t[0]=n('<h1 id="第0节-不同的类型系统" tabindex="-1"><a class="header-anchor" href="#第0节-不同的类型系统"><span>第0节 - 不同的类型系统</span></a></h1><div class="hint-container info"><p class="hint-container-title">目录</p><ul><li><a href="strong-and-weak-systems">第0节 - 弱类型系统与强类型系统</a></li><li><a href="static-and-dynamic-systems">第1节 - 动态和静态类型语言</a></li><li><a href="functional-systems">第2节 - STLC、System-F与Hindley-Milner类型系统 (函数类型)</a></li></ul></div><blockquote><p>编程语言这么多，它们都说自己有“类型”。有人说 Python 是弱类型，有人说 Java 是强类型，也有人在聊什么“System F”……那我们不妨从头捋一捋：到底什么是“类型”？类型系统到底是“系统”在哪？</p></blockquote><p>那到底，什么是类型（Type）呢？</p><p>第一次在计算机课上打开Dev C++，老师告诉你类型就是程序中数据的标签或分类，它告诉我们“这个数据是什么样的”、“能对它做什么操作”。</p><ul><li><p>一个数字 <code>42</code> 的类型是“数字” (<code>Int</code>)</p></li><li><p>一段文字 <code>&quot;Hello&quot;</code> 的类型是“字符串” (<code>String</code>或者<code>Array&lt;Char&gt;</code>)</p></li><li><p>一个函数 <code>f</code> 的类型可能是“从数字到数字”的函数。(<code>int -&gt; int</code> 或者 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Γ</mi><mo>⊢</mo><mtext>int</mtext><mo>→</mo><mtext>int</mtext></mrow><annotation encoding="application/x-tex">\\Gamma \\vdash \\text{int} \\to \\text{int}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">Γ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⊢</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6679em;"></span><span class="mord text"><span class="mord">int</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6679em;"></span><span class="mord text"><span class="mord">int</span></span></span></span></span>)</p></li></ul><p>通过给数据贴上类型标签，程序员和编译器都能更好地理解代码的结构和含义。</p><p>等到你学到再高等的算法结构之后，你发现计算机中处处是数学。从数学角度来说，类型是一个集合。有一些运算只能是特定集合内的元素才能进行，就像是群一样，而对于这些集合的运算，我们可以得到各种各样神奇的类型。两个集合的并集对应和类型（Sum Type），笛卡尔积对应积类型（Product Type），函数类型可以看作集合之间的映射，而类型之间的子集关系也能刻画出“子类型”的概念。从这个角度看，类型系统就像是一门关于集合与映射的代数。</p><p>事实上，类型在数学中目前最常见的是笛卡尔闭合范畴 (Cartesian Closed Category, CCC)。这是一种更加抽象的数学模型，但可以为安全性分析带来很多有利的工具。</p><p>准备好了的话，就进入第一章吧！</p>',10)),o(a,{title:"弱类型与强类型系统",href:"strong-and-weak-systems"})])}const d=e(r,[["render",l],["__file","index.html.vue"]]),h=JSON.parse('{"path":"/CS/theoretical/type-theory/type-systems/","title":"第0节 - 不同的类型系统","lang":"zh-CN","frontmatter":{"description":"第0节 - 不同的类型系统 目录 第0节 - 弱类型系统与强类型系统 第1节 - 动态和静态类型语言 第2节 - STLC、System-F与Hindley-Milner类型系统 (函数类型) 编程语言这么多，它们都说自己有“类型”。有人说 Python 是弱类型，有人说 Java 是强类型，也有人在聊什么“System F”……那我们不妨从头捋一捋：...","head":[["meta",{"property":"og:url","content":"https://makabaka1880.xyz/CS/theoretical/type-theory/type-systems/"}],["meta",{"property":"og:site_name","content":"Makabaka1880的博客"}],["meta",{"property":"og:title","content":"第0节 - 不同的类型系统"}],["meta",{"property":"og:description","content":"第0节 - 不同的类型系统 目录 第0节 - 弱类型系统与强类型系统 第1节 - 动态和静态类型语言 第2节 - STLC、System-F与Hindley-Milner类型系统 (函数类型) 编程语言这么多，它们都说自己有“类型”。有人说 Python 是弱类型，有人说 Java 是强类型，也有人在聊什么“System F”……那我们不妨从头捋一捋：..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-05T15:08:25.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-05T15:08:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第0节 - 不同的类型系统\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-05T15:08:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Makabaka1880\\",\\"url\\":\\"https://makabaka1880.xyz\\"}]}"]]},"headers":[],"git":{"createdTime":1750154378000,"updatedTime":1751728105000,"contributors":[{"name":"makabaka1880","username":"makabaka1880","email":"makabaka1880@outlook.com","commits":2,"url":"https://github.com/makabaka1880"}]},"readingTime":{"minutes":1.86,"words":559},"filePathRelative":"CS/theoretical/type-theory/type-systems/readme.md","localizedDate":"2025年6月17日","excerpt":"\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">目录</p>\\n<ul>\\n<li><a href=\\"strong-and-weak-systems\\">第0节 - 弱类型系统与强类型系统</a></li>\\n<li><a href=\\"static-and-dynamic-systems\\">第1节 - 动态和静态类型语言</a></li>\\n<li><a href=\\"functional-systems\\">第2节 - STLC、System-F与Hindley-Milner类型系统 (函数类型)</a></li>\\n</ul>\\n</div>","autoDesc":true}');export{d as comp,h as data};
