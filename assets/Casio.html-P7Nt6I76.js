import{_ as a,c as d,g as n,d as r,o as s,r as o}from"./app-CVkNJmK6.js";const i="/assets/CS/CS-CASIO-0x00-1.webp",p={};function c(b,t){const e=o("Vssue");return s(),d("div",null,[t[0]||(t[0]=n('<h1 id="casio-fx991cn-常见炸机方法" tabindex="-1"><a class="header-anchor" href="#casio-fx991cn-常见炸机方法"><span>CASIO fx991cn 常见炸机方法</span></a></h1><h2 id="_0x00-引言" tabindex="-1"><a class="header-anchor" href="#_0x00-引言"><span>0x00 引言</span></a></h2><p>作为一名长期和计算器打交道的中学生，难免会对计算器有一些好奇。在网上一番查找过后，我发现对于fx991cn可以算得上是计算器反向工程史上最牛逼的壮举了</p><p>本文将会详细的讲述如何科学的探rou索lin你的fx991计算器(doge</p><h2 id="_0x01-推荐资源" tabindex="-1"><a class="header-anchor" href="#_0x01-推荐资源"><span>0x01 推荐资源</span></a></h2><h3 id="fx-es-ms-吧" tabindex="-1"><a class="header-anchor" href="#fx-es-ms-吧"><span>fx-es(ms)吧</span></a></h3><p>这算是这里面的重量级选手了</p><figure><img src="'+i+'" alt="Img" tabindex="0" loading="lazy"><figcaption>Img</figcaption></figure><p>贴吧里的技术贴一直以硬核著称 这里就不细说了</p><h2 id="_0x02-字符转换器" tabindex="-1"><a class="header-anchor" href="#_0x02-字符转换器"><span>0x02 字符转换器</span></a></h2><p>“压力漏洞”是fx991cn目前为止最常用的卡bug方法</p><p>此方法由B站用户<a href="https://www.bilibili.com/video/BV1pA411c7tr/">CR训练师</a>在17年发现的（当然在此之前也有类似的变体在坊间流传）</p><p>不过目前为止用的最常见的和这位先驱的方法还是不太一样的。卡出此漏洞的方式为先打出一个数字，输入 lbf/in<sup>2</sup> ▶︎ kPa，就可以进入所谓的<b>字符转换器</b>。</p><p><kbd>1</kbd> <kbd>Shift</kbd> <kbd>8</kbd> <kbd>↓</kbd> <kbd>2</kbd> <kbd>7</kbd> <kbd>=</kbd> <kbd>↑</kbd> <kbd>←</kbd></p><p>进入字符转换器后，输入的任何字符都会变成别的字符。</p><table><thead><tr><th>原始按键</th><th>转换后字符</th></tr></thead><tbody><tr><td>º &#39; &quot;</td><td>g ▶︎ 厘</td></tr><tr><td>)</td><td>m^2 ▶︎ 勺</td></tr><tr><td>÷</td><td>分 ▶︎ mm</td></tr><tr><td>×</td><td>cm ▶︎ 寸</td></tr><tr><td>+</td><td>m ▶︎ 尺</td></tr><tr><td><kbd>Alpha</kbd> <kbd>Calc</kbd> 也就是 =</td><td>尺 ▶︎ m</td></tr><tr><td>(-) 负号</td><td>L ▶︎ 斗</td></tr><tr><td><kbd>Optn</kbd> <kbd>2</kbd> <kbd>1</kbd> 也就是 º</td><td>g ▶︎ 毛</td></tr><tr><td><kbd>Optn</kbd> <kbd>2</kbd> <kbd>2</kbd> 也就是 <sup>r</sup></td><td>毛 ▶︎ g</td></tr><tr><td><kbd>Optn</kbd> <kbd>2</kbd> <kbd>3</kbd> 也就是 <sup>g</sup></td><td>厘 ▶︎ g</td></tr><tr><td><kbd>Shift</kbd> <kbd>×</kbd> 也就是<b>P</b></td><td>町 ▶︎ m</td></tr><tr><td><kbd>Shift</kbd> <kbd>÷</kbd> 也就是<b>C</b></td><td>m ▶︎ 町</td></tr><tr><td>- 减号</td><td>寸 ▶︎ cm</td></tr></tbody></table><p>打出来的东西如果直接进行计算的话会出现数学错误。</p>',17)),r(e)])}const m=a(p,[["render",c],["__file","Casio.html.vue"]]),k=JSON.parse('{"path":"/CS/miscellaneous/Casio.html","title":"CASIO fx991cn 常见炸机方法","lang":"zh-CN","frontmatter":{"description":"CASIO fx991cn 常见炸机方法 0x00 引言 作为一名长期和计算器打交道的中学生，难免会对计算器有一些好奇。在网上一番查找过后，我发现对于fx991cn可以算得上是计算器反向工程史上最牛逼的壮举了 本文将会详细的讲述如何科学的探rou索lin你的fx991计算器(doge 0x01 推荐资源 fx-es(ms)吧 这算是这里面的重量级选手了...","head":[["meta",{"property":"og:url","content":"https://makabaka1880.xyz/CS/miscellaneous/Casio.html"}],["meta",{"property":"og:site_name","content":"Makabaka1880的博客"}],["meta",{"property":"og:title","content":"CASIO fx991cn 常见炸机方法"}],["meta",{"property":"og:description","content":"CASIO fx991cn 常见炸机方法 0x00 引言 作为一名长期和计算器打交道的中学生，难免会对计算器有一些好奇。在网上一番查找过后，我发现对于fx991cn可以算得上是计算器反向工程史上最牛逼的壮举了 本文将会详细的讲述如何科学的探rou索lin你的fx991计算器(doge 0x01 推荐资源 fx-es(ms)吧 这算是这里面的重量级选手了..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://makabaka1880.xyz/assets/CS/CS-CASIO-0x00-1.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-22T03:53:16.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-22T03:53:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CASIO fx991cn 常见炸机方法\\",\\"image\\":[\\"https://makabaka1880.xyz/assets/CS/CS-CASIO-0x00-1.webp\\"],\\"dateModified\\":\\"2025-03-22T03:53:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Makabaka1880\\",\\"url\\":\\"https://makabaka1880.xyz\\"}]}"]]},"headers":[{"level":2,"title":"0x00 引言","slug":"_0x00-引言","link":"#_0x00-引言","children":[]},{"level":2,"title":"0x01 推荐资源","slug":"_0x01-推荐资源","link":"#_0x01-推荐资源","children":[{"level":3,"title":"fx-es(ms)吧","slug":"fx-es-ms-吧","link":"#fx-es-ms-吧","children":[]}]},{"level":2,"title":"0x02 字符转换器","slug":"_0x02-字符转换器","link":"#_0x02-字符转换器","children":[]}],"git":{"createdTime":1734876375000,"updatedTime":1742615596000,"contributors":[{"name":"makabaka1880","username":"makabaka1880","email":"makabaka1880@outlook.com","commits":3,"url":"https://github.com/makabaka1880"}]},"readingTime":{"minutes":1.56,"words":467},"filePathRelative":"CS/miscellaneous/Casio.md","localizedDate":"2024年12月22日","excerpt":"\\n<h2>0x00 引言</h2>\\n<p>作为一名长期和计算器打交道的中学生，难免会对计算器有一些好奇。在网上一番查找过后，我发现对于fx991cn可以算得上是计算器反向工程史上最牛逼的壮举了</p>\\n<p>本文将会详细的讲述如何科学的探rou索lin你的fx991计算器(doge</p>\\n<h2>0x01 推荐资源</h2>\\n<h3>fx-es(ms)吧</h3>\\n<p>这算是这里面的重量级选手了</p>\\n<figure><img src=\\"/assets/CS/CS-CASIO-0x00-1.webp\\" alt=\\"Img\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>Img</figcaption></figure>","autoDesc":true}');export{m as comp,k as data};
