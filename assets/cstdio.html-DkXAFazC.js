import{_ as n,c as d,g as a,b as s,f as t,d as l,e as h,r as p,o as r}from"./app-CVkNJmK6.js";const o={};function k(c,i){const e=p("RouteLink");return r(),d("div",null,[i[8]||(i[8]=a(`<h1 id="c-standard-i-o-legacy-methods" tabindex="-1"><a class="header-anchor" href="#c-standard-i-o-legacy-methods"><span>C Standard I/O Legacy Methods</span></a></h1><p>One can use c legacy io methods by importing the <code>cstdio</code> into the source file.</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;cstdio&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_0x00-using-printf" tabindex="-1"><a class="header-anchor" href="#_0x00-using-printf"><span>0x00 Using Printf</span></a></h2><p><code>printf</code> is a stdout method used in <code>C</code>. Usage as following:</p><ul><li><code>Control Sequence</code> First arg.</li><li><code>Vars</code>, Othervars.</li></ul><table><thead><tr><th>Output</th><th>printf</th><th>cout</th></tr></thead><tbody><tr><td>int</td><td><code>printf(&quot;%d&quot;, a)</code></td><td><code>cout &lt;&lt; a</code></td></tr><tr><td>long</td><td><code>prinf(&quot;%d&quot;, a)</code></td><td><code>cout &lt;&lt; a</code></td></tr><tr><td>float</td><td><code>printf(&quot;%f&quot;, f)</code></td><td><code>cout &lt;&lt; a</code></td></tr><tr><td>double</td><td><code>printf(&quot;%lf&quot;, d)</code></td><td><code>cout &lt;&lt; d</code></td></tr><tr><td>double (2 precision)</td><td><code>printf(&quot;%.2lf&quot;, d)</code></td><td><code>cout &lt;&lt; fixed &lt;&lt; setprecision(2) &lt;&lt; d</code></td></tr><tr><td>char</td><td><code>print(&quot;%c&quot;, c)</code></td><td><code>cout &lt;&lt; c</code></td></tr><tr><td>string</td><td><code>print(&quot;%s, s&quot;)</code></td><td><code>cout &lt;&lt; s</code></td></tr><tr><td>mixed</td><td><code>print(&quot;Int %d, Float %f&quot;, a, b)</code></td><td><code>cout &lt;&lt; &lt;&lt; &quot;Int &quot; &lt;&lt; a &lt;&lt; &quot;, Float &quot; &lt;&lt; b</code></td></tr></tbody></table><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;cstdio&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 15342</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> f </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2.1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    double</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> lf </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3.0012</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;t&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello World!</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">i = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">, l = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%ld</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">, f = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%.2f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">, lf = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%lf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">, a = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%c</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, i, l, f, lf, a);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Escaping sequence: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">n outputs </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">n&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_0x01-using-scanf" tabindex="-1"><a class="header-anchor" href="#_0x01-using-scanf"><span>0x01 Using Scanf</span></a></h2>`,9)),s("p",null,[i[1]||(i[1]=s("code",null,"scanf",-1)),i[2]||(i[2]=t(" is a stdin method used in ")),i[3]||(i[3]=s("code",null,"C",-1)),i[4]||(i[4]=t(". Usage is similar to ")),i[5]||(i[5]=s("code",null,"printf",-1)),i[6]||(i[6]=t(", but characters other than control sequences are not allowed. Instead of variables accessede by control sequences, an ")),l(e,{to:"/CS/cpp/variables.html#_0x03-addresses"},{default:h(()=>i[0]||(i[0]=[s("strong",null,"address",-1)])),_:1}),i[7]||(i[7]=t(" is needed to be passed in sinced the var needed to be passed in."))]),i[9]||(i[9]=a(`<ul><li><code>Control Sequence</code> First arg.</li><li><code>Vars</code>, Othervars. Need to be an address.</li></ul><table><thead><tr><th>Output</th><th>printf</th><th>cout</th></tr></thead><tbody><tr><td>int</td><td><code>scanf(&quot;%d&quot;, &amp;a)</code></td><td><code>cin &gt;&gt; a</code></td></tr><tr><td>long</td><td><code>scanf(&quot;%d&quot;, &amp;a)</code></td><td><code>cin &gt;&gt; a</code></td></tr><tr><td>float</td><td><code>scanf(&quot;%f&quot;, &amp;f)</code></td><td><code>cin &gt;&gt; a</code></td></tr><tr><td>double</td><td><code>scanf(&quot;%lf&quot;, &amp;d)</code></td><td><code>cin &gt;&gt; d</code></td></tr><tr><td>char</td><td><code>print(&quot;%c&quot;, &amp;c)</code></td><td><code>cin &gt;&gt; c</code></td></tr><tr><td>string</td><td><code>print(&quot;%s, &amp;s&quot;)</code></td><td><code>cin &gt;&gt; s</code></td></tr><tr><td>multiple vars</td><td><code>print(&quot;%d%f&quot;, &amp;a, &amp;b)</code></td><td><code>cin &gt;&gt; a &gt;&gt; b</code></td></tr></tbody></table><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;cstdio&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Input: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    scanf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;a = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, a);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Both methods allow for standard escape sequences like <code>\\n</code></p>`,4))])}const u=n(o,[["render",k],["__file","cstdio.html.vue"]]),A=JSON.parse('{"path":"/CS/cpp/cstdio.html","title":"C Standard I/O Legacy Methods","lang":"zh-CN","frontmatter":{"description":"C Standard I/O Legacy Methods One can use c legacy io methods by importing the cstdio into the source file. 0x00 Using Printf printf is a stdout method used in C. Usage as follo...","head":[["meta",{"property":"og:url","content":"https://makabaka1880.xyz/CS/cpp/cstdio.html"}],["meta",{"property":"og:site_name","content":"Makabaka1880的博客"}],["meta",{"property":"og:title","content":"C Standard I/O Legacy Methods"}],["meta",{"property":"og:description","content":"C Standard I/O Legacy Methods One can use c legacy io methods by importing the cstdio into the source file. 0x00 Using Printf printf is a stdout method used in C. Usage as follo..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-21T08:43:47.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-21T08:43:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C Standard I/O Legacy Methods\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-21T08:43:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Makabaka1880\\",\\"url\\":\\"https://makabaka1880.xyz\\"}]}"]]},"headers":[{"level":2,"title":"0x00 Using Printf","slug":"_0x00-using-printf","link":"#_0x00-using-printf","children":[]},{"level":2,"title":"0x01 Using Scanf","slug":"_0x01-using-scanf","link":"#_0x01-using-scanf","children":[]}],"git":{"createdTime":1736672634000,"updatedTime":1742546627000,"contributors":[{"name":"makabaka1880","username":"makabaka1880","email":"makabaka1880@outlook.com","commits":3,"url":"https://github.com/makabaka1880"}]},"readingTime":{"minutes":0.97,"words":292},"filePathRelative":"CS/cpp/cstdio.md","localizedDate":"2025年1月12日","excerpt":"\\n<p>One can use c legacy io methods by importing the <code>cstdio</code> into the source file.</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"cpp\\" data-title=\\"cpp\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">#include</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> &lt;cstdio&gt;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{u as comp,A as data};
