import{_ as d,c as o,g as e,b as s,d as a,e as n,f as t,r as p,o as h}from"./app-CVkNJmK6.js";const k="/assets/CS/CS-Type-0.webp",c={},y={class:"hint-container info"};function m(g,i){const r=p("RouteLink"),l=p("Anchor");return h(),o("div",null,[i[9]||(i[9]=e('<h1 id="程序语言理论-类型系统" tabindex="-1"><a class="header-anchor" href="#程序语言理论-类型系统"><span>程序语言理论 - 类型系统</span></a></h1><div class="hint-container info"><p class="hint-container-title">写在前面</p><p>作为一名软件开发者，或多或少会遇到过各种各样的类型系统。虽然说当今的编程语言大多已经十分完善且安全，但每个语言还是有自己的不足，需要学习类型理论来进行特定类型的实现。同时，类型理论的额学习也可以帮助软件开发者更好的写出更加优雅、稳定、且安全的代码，利人利己。我个人认为PLT是计算机科学里面最美的分支了可以用各种神奇的模型来描绘一些我们从来没法想到过的模型，来完成一下完全想不到的壮举。本系列就是为了方便初学者来快速入门类型论、程序语言理论、多范式编程、及范畴论等在传统软件工程领域被严重忽视的理论计算科学。</p><p>欢迎大佬帮忙指出错误，我也在学习，大家一起进步～</p></div><h2 id="序言" tabindex="-1"><a class="header-anchor" href="#序言"><span>序言</span></a></h2><div class="hint-container tip"><p class="hint-container-title">本节术语 | Glossary</p><ul><li><a href="#safety"><strong>安全性 (safety)</strong></a> 指程序在运行时避免未定义行为和错误的能力，包括程序的可验证性、鲁棒性以及对异常情况的安全处理。</li><li><a href="#mcu"><strong>MCU (Micro Computing Unit)</strong></a> 嵌入式设备的核心处理器，成本低廉功能单一</li></ul></div>',4)),s("div",y,[i[2]||(i[2]=s("p",{class:"hint-container-title"},"目录",-1)),s("ul",null,[s("li",null,[a(r,{to:"/CS/theoretical/type-theory/type-systems/"},{default:n(()=>i[0]||(i[0]=[t("第0章 - 类型系统")])),_:1}),i[1]||(i[1]=s("ul",null,[s("li",null,[s("a",{href:"type-systems/strong-and-weak-systems"},"第0节 - 弱类型系统与强类型系统")]),s("li",null,[s("a",{href:"type-systems/static-and-dynamic-systems"},"第1节 - 动态和静态类型语言")]),s("li",null,[s("a",{href:"type-systems/functional-systems"},"第2节 - STLC、System-F与Hindley-Milner类型系统 (函数类型)")])],-1))])])]),i[10]||(i[10]=e('<p>凌晨2:17。显示器冷光刺破黑暗，键盘的敲击声是房间里唯一的声响。</p><p>你按下保存，<code>git push</code>，看着CD / CI管线丝滑的运行着，你十分满意。</p><p>就在这时...</p><div class="language-diff line-numbers-mode" data-highlighter="shiki" data-ext="diff" data-title="diff" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">- ❌ Production deployment failed: Undefined behavior at 0xFFFF0004</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>没有堆栈跟踪，没有错误上下文。日志里只有一行冰冷的十六进制地址，像黑夜中突然熄灭的灯塔。</p><p>这不是恐怖片情节，而是程序安全性缺失的日常噩梦。</p><p>一个程序不安全可能有很多原因。</p>',7)),s("p",null,[i[4]||(i[4]=t("我们先来看看一个日常的例子吧。在我们身边，有无数的")),a(l,{id:"mcu"},{default:n(()=>i[3]||(i[3]=[t("MCU (Micro Computing Unit)")])),_:1}),i[5]||(i[5]=t("。它们和外界沟通可以通过串口，UART，I")),i[6]||(i[6]=s("sup",null,"2",-1)),i[7]||(i[7]=t("C等方式沟通，还有一个：中断。由于生产环境中的中断类型较多，我们可以用向量来表示他们。如下："))]),i[11]||(i[11]=e(`<p>例如在LPC2214中，VIC(Vector Interruption Controller)采用了多选一的位域设计。<br> 比如说，这是理论理论上来说<code>VICVectCntl</code>寄存器中只可以有一位是1，但是这种设计很难保证在中途不会因为资源竞争(data race)等原因导致未发现的位反转。例如以下情况会使中断系统进入不可预测的状态：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">VICVectCntl0_Type VICVectCntl0;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">VICVectCntl0.enable </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">VICVectCntl0.priority </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">VICVectCntl0.vector </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">uint32_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)Handler0;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">VICVectCntl0_Type VICVectCntl1;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">VICVectCntl1.enable </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">VICVectCntl1.priority </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">VICVectCntl1.vector </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">uint32_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)Handler1;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似的情况还出现在高级语言中。</p><figure><img src="`+k+'" alt="JS的类型系统真的累心" tabindex="0" loading="lazy"><figcaption>JS的类型系统真的累心</figcaption></figure><p>JS的隐式转换那是臭名昭著的乱七八糟，写出来的变量天知道下一秒会以什么神奇的方式变成什么样子。但又因为其普及型，让它成为了前端开发必不可少的工具。<br> 这些代码写出来时，开发者内心的OS通常是：</p>',5)),a(l,{id:"safety"},{default:n(()=>i[8]||(i[8]=[t("这语言太不安全了！")])),_:1}),i[12]||(i[12]=t(" 运行效果全靠玄学，调试过程宛如开盲盒！")),i[13]||(i[13]=s("p",null,"经过数百年的研究之后，计算机科学家们发现这些看似五花八门的安全漏洞，追根溯源都指向同一个核心问题：类型系统的缺失或不完备。",-1)),i[14]||(i[14]=s("p",null,'本文将带您深入程序语言理论的基石——类型系统，揭示计算机科学家们如何用数十年智慧结晶，为代码世界构筑起坚实的安全长城。从C的脆弱到Rust的坚不可摧，从JS的混乱到TypeScript的秩序，让我们一同探索类型如何成为程序世界的"免疫系统"。',-1))])}const A=d(c,[["render",m],["__file","index.html.vue"]]),C=JSON.parse('{"path":"/CS/theoretical/type-theory/","title":"程序语言理论 - 类型系统","lang":"zh-CN","frontmatter":{"sticky":true,"description":"程序语言理论 - 类型系统 写在前面 作为一名软件开发者，或多或少会遇到过各种各样的类型系统。虽然说当今的编程语言大多已经十分完善且安全，但每个语言还是有自己的不足，需要学习类型理论来进行特定类型的实现。同时，类型理论的额学习也可以帮助软件开发者更好的写出更加优雅、稳定、且安全的代码，利人利己。我个人认为PLT是计算机科学里面最美的分支了可以用各种神奇...","head":[["meta",{"property":"og:url","content":"https://makabaka1880.xyz/CS/theoretical/type-theory/"}],["meta",{"property":"og:site_name","content":"Makabaka1880的博客"}],["meta",{"property":"og:title","content":"程序语言理论 - 类型系统"}],["meta",{"property":"og:description","content":"程序语言理论 - 类型系统 写在前面 作为一名软件开发者，或多或少会遇到过各种各样的类型系统。虽然说当今的编程语言大多已经十分完善且安全，但每个语言还是有自己的不足，需要学习类型理论来进行特定类型的实现。同时，类型理论的额学习也可以帮助软件开发者更好的写出更加优雅、稳定、且安全的代码，利人利己。我个人认为PLT是计算机科学里面最美的分支了可以用各种神奇..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://makabaka1880.xyz/assets/CS/CS-Type-0.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-05T15:08:25.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-05T15:08:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"程序语言理论 - 类型系统\\",\\"image\\":[\\"https://makabaka1880.xyz/assets/CS/CS-Type-0.webp\\"],\\"dateModified\\":\\"2025-07-05T15:08:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Makabaka1880\\",\\"url\\":\\"https://makabaka1880.xyz\\"}]}"]]},"headers":[{"level":2,"title":"序言","slug":"序言","link":"#序言","children":[]}],"git":{"createdTime":1750154378000,"updatedTime":1751728105000,"contributors":[{"name":"makabaka1880","username":"makabaka1880","email":"makabaka1880@outlook.com","commits":5,"url":"https://github.com/makabaka1880"}]},"readingTime":{"minutes":3.57,"words":1071},"filePathRelative":"CS/theoretical/type-theory/readme.md","localizedDate":"2025年6月17日","excerpt":"\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">写在前面</p>\\n<p>作为一名软件开发者，或多或少会遇到过各种各样的类型系统。虽然说当今的编程语言大多已经十分完善且安全，但每个语言还是有自己的不足，需要学习类型理论来进行特定类型的实现。同时，类型理论的额学习也可以帮助软件开发者更好的写出更加优雅、稳定、且安全的代码，利人利己。我个人认为PLT是计算机科学里面最美的分支了可以用各种神奇的模型来描绘一些我们从来没法想到过的模型，来完成一下完全想不到的壮举。本系列就是为了方便初学者来快速入门类型论、程序语言理论、多范式编程、及范畴论等在传统软件工程领域被严重忽视的理论计算科学。</p>\\n<p>欢迎大佬帮忙指出错误，我也在学习，大家一起进步～</p>\\n</div>","autoDesc":true}');export{A as comp,C as data};
